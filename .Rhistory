}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(paste0(save_path, save_name))
} else {
return(formatted)
}
}
#'
#' @examples
#' layout_file <- system.file(
#'   "extdata/BMG_formatting",
#'   file = "plate_layout.csv",
#'   package = "quicR"
#' )
#' BMG_format(layout_file)
#'
#' @export
BMG_format <- function(file, save_path = "./", save_name = "formatted.txt", write_file = FALSE) {
df_ <- read.csv(file, header = F)
colnames(df_) <- c("col", df_[1, -1])
df_ <- df_[-1, ]
locations <- c()
samples <- c()
for (i in 1:(ncol(df_) - 1)) {
for (j in 1:nrow(df_)) {
locations <- rbind(locations, paste0(LETTERS[j], i))
samples <- rbind(samples, df_[j, (i + 1)])
}
}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(paste0(save_path, save_name))
}
return(formatted)
}
BMG_format(sample_file, write_file = TRUE)
library(tidyr)
BMG_format(sample_file, write_file = TRUE)
setwd("~/Work/quicR/man/manuscript")
BMG_format(sample_file, write_file = TRUE)
#'
#' @examples
#' layout_file <- system.file(
#'   "extdata/BMG_formatting",
#'   file = "plate_layout.csv",
#'   package = "quicR"
#' )
#' BMG_format(layout_file)
#'
#' @export
BMG_format <- function(file, save_path = "", save_name = "formatted.txt", write_file = FALSE) {
df_ <- read.csv(file, header = F)
colnames(df_) <- c("col", df_[1, -1])
df_ <- df_[-1, ]
locations <- c()
samples <- c()
for (i in 1:(ncol(df_) - 1)) {
for (j in 1:nrow(df_)) {
locations <- rbind(locations, paste0(LETTERS[j], i))
samples <- rbind(samples, df_[j, (i + 1)])
}
}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(paste0(save_path, save_name))
}
return(formatted)
}
BMG_format(sample_file, write_file = TRUE)
file <- sample_file
save_path = ""
save_name = "formatted.txt"
write_file = T
df_ <- read.csv(file, header = F)
colnames(df_) <- c("col", df_[1, -1])
df_ <- df_[-1, ]
locations <- c()
samples <- c()
for (i in 1:(ncol(df_) - 1)) {
for (j in 1:nrow(df_)) {
locations <- rbind(locations, paste0(LETTERS[j], i))
samples <- rbind(samples, df_[j, (i + 1)])
}
}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(paste0(save_path, save_name))
}
?writeLines
sample_file <- "../../inst/extdata/BMG_formatting/plate_layout.csv"
path <- "../../inst/extdata/BMG_formatting"
BMG_format(sample_file, path = path, write_file = TRUE)#[1:12]
BMG_format(sample_file, save_path = path, write_file = TRUE)#[1:12]
library(readr)
?write_lines
?writeLines
#'
#' @examples
#' layout_file <- system.file(
#'   "extdata/BMG_formatting",
#'   file = "plate_layout.csv",
#'   package = "quicR"
#' )
#' BMG_format(layout_file)
#'
#' @export
BMG_format <- function(file, save_path = "", save_name = "formatted.txt", write_file = FALSE) {
df_ <- read.csv(file, header = F)
colnames(df_) <- c("col", df_[1, -1])
df_ <- df_[-1, ]
locations <- c()
samples <- c()
for (i in 1:(ncol(df_) - 1)) {
for (j in 1:nrow(df_)) {
locations <- rbind(locations, paste0(LETTERS[j], i))
samples <- rbind(samples, df_[j, (i + 1)])
}
}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(formatted, paste0(save_path, save_name))
}
return(formatted)
}
BMG_format(sample_file, save_path = path, write_file = TRUE)#[1:12]
if (write_file == TRUE) {
writeLines(formatted, paste0(save_path, save_name))
}
#'
#' @examples
#' layout_file <- system.file(
#'   "extdata/BMG_formatting",
#'   file = "plate_layout.csv",
#'   package = "quicR"
#' )
#' BMG_format(layout_file)
#'
#' @export
BMG_format <- function(file, save_path = "", save_name = "formatted.txt", write_file = FALSE) {
df_ <- read.csv(file, header = F)
colnames(df_) <- c("col", df_[1, -1])
df_ <- df_[-1, ]
locations <- c()
samples <- c()
for (i in 1:(ncol(df_) - 1)) {
for (j in 1:nrow(df_)) {
locations <- rbind(locations, paste0(LETTERS[j], i))
samples <- rbind(samples, df_[j, (i + 1)])
}
}
locations <- locations |>
cbind(samples) |>
as.data.frame()
colnames(locations) <- c("Wells", "Samples")
dic <- df_ |>
melt(id.vars = 1) |>
unique() |>
mutate(Plate_ID = "X") |>
na.omit() |>
unite("Wells", c("col", "variable"), sep = "")
x <- 0
previous <- dic[["value"]][1]
current <- ""
for (i in 1:nrow(dic)) {
current <- dic[["value"]][i]
if (tolower(current) == "n") {
dic[i, "Plate_ID"] <- "N"
} else if (tolower(current) == "p") {
dic[i, "Plate_ID"] <- "P"
} else if (tolower(current) == "b") {
dic[i, "Plate_ID"] <- "B"
} else {
if (previous != current) {
x <- x + 1
}
dic[i, "Plate_ID"] <- paste0(dic[[i, "Plate_ID"]], x)
}
previous <- current
}
dic <- select(dic, -"value")
locations <- left_join(locations, dic)
# Function to format each row
format_row <- function(row) {
sprintf("%-4s%-7s%s", row[1], row[3], row[2])
}
# Apply the function to each row of the data frame
formatted <- locations |>
apply(1, format_row) |>
na.omit()
if (write_file == TRUE) {
writeLines(formatted, paste0(save_path, save_name))
}
return(formatted)
}
BMG_format(sample_file, write_file = TRUE)[1:12]
get_meta(file) %>% as.data.frame()%>% kable()
get_meta(file) %>% as.data.frame() %>% kable()
file <- "../../inst/extdata/input_files/test2.xlsx"
get_meta(file) %>% as.data.frame() %>% kable()
?kable
get_meta(file) %>% as.data.frame() %>% kable(escape = T)
get_meta(file) %>%
as.data.frame() %>%
mutate_at(Meta_info, ~gsub("\\", "/", .)) %>%
kable(escape = T)
get_meta(file) %>%
as.data.frame() %>%
mutate_at("Meta_info", ~gsub("\\", "/", .)) %>%
kable(escape = T)
get_meta(file) %>%
as.data.frame() %>%
mutate_at("Meta_info", ~gsub("\\", "/", .)) %>%
kable()
get_meta(file) %>%
as.data.frame() %>%
mutate_at("Meta_info", ~gsub("\\\\", "/", .)) %>%
kable()
get_meta(file) %>%
# as.data.frame() %>%
mutate_at("Meta_info", ~gsub("\\\\", "/", .)) %>%
kable()
View(df_)
?deprecated
deprecated()
?kable
?footnote
??footnote
rename <- function(x) {
names(x) <- 1:12
rownames(x) <- LETTERS[1:8]
return(x)
}
tabs$`Sample IDs` %>%
as.data.frame() %>%
rename() %>%
kable(
align = rep("c", 12),
caption = "Sample IDs"
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE)
tabs <- organize_tables(file)[-2]
library(quicR)
library(dplyr)
library(kableExtra)
library(readxl)
library(readr)
library(ggplot2)
library(reshape2)
file <- "../../inst/extdata/input_files/test2.xlsx"
file_384 <- "../../inst/extdata/input_files/test384.xlsx"
sample_file <- "../../inst/extdata/BMG_formatting/plate_layout.csv"
path <- "../../inst/extdata/BMG_formatting"
#| label: tbl-sampleids
#| tbl-cap: Sample IDs
rename <- function(x) {
names(x) <- 1:12
rownames(x) <- LETTERS[1:8]
return(x)
}
tabs$`Sample IDs` %>%
as.data.frame() %>%
rename() %>%
kable(
format = "latex",
booktabs = TRUE,
align = rep("c", 12),
# caption = "Sample IDs",
linesep = ""
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(latex_options = c("HOLD_position"))
tabs <- organize_tables(file)[-2]
#| label: tbl-dilutions
#| tbl-cap: Dilutions
tabs$Dilutions %>%
as.data.frame() %>%
mutate_all(~-log10(.)) %>%
rename() %>%
kable(
format = "latex",
booktabs = TRUE,
align = rep("c", 12),
# caption = "Dilutions",
linesep = ""
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(latex_options = c("HOLD_position", "scale_down"))
#| label: tbl-dilutions
#| tbl-cap: Dilutions
tabs$Dilutions %>%
as.data.frame() %>%
mutate_all(function(x) -log10(x)) %>%
rename() %>%
kable(
# format = "latex",
booktabs = TRUE,
align = rep("c", 12),
# caption = "Dilutions",
linesep = ""
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE)
?mutate_all
#| label: tbl-dilutions
#| tbl-cap: Dilutions
tabs$Dilutions %>%
as.data.frame() %>%
mutate_all(function(x) -log10(as.integer(x))) %>%
rename() %>%
kable(
# format = "latex",
booktabs = TRUE,
align = rep("c", 12),
# caption = "Dilutions",
linesep = ""
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE)
