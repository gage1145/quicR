IDs
}
)
)
}
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Read in the real-time data.
# get_real will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered = FALSE)
df_id <- ifelse(
length(df_list) > 1,
as.integer(
readline(
paste(
"There are",
length(df_list),
"real-time data sets. Please enter a number in that range: "
)
)
),
1
)
df <- df_list[[df_id]] %>%
as.data.frame %>%
column_to_rownames("Time")
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
quicR::plate_view(df, sample_locations, plate)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(IDs),
"\n",
(organize_tables(file) %>% convert_tables())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
IDs
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
View(sample_locations)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
suppressMessages() %>%
convert_tables()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(IDs),
"\n",
(organize_tables(file) %>%
suppressMessages() %>%
convert_tables())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(IDs),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
suppressMessages() %>%
convert_tables() %>%
suppressMessages()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(IDs),
"\n",
(organize_tables(file) %>%
suppressMessages() %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file) %>%
suppressMessages(),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(IDs),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
View(sample_locations)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name, dilution_bool = FALSE, plate = 96) {
return(
data.frame(
wells = get_wells(file) %>%
suppressMessages(),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages()
)[[tab_name]] %>%
na.omit()
) %>%
mutate(
"IDs" = ifelse(
stringr::str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
log10() * -1 %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
)
}
sample_locations <- get_sample_locations(file, "Sample IDs", dilution_bool)
View(sample_locations)
?gsub
?kable
library(kableExtra)
library(dplyr)
library(readxl)
read_xlsx("inst/extdata/input_files/test.xlsx")[1:10, ] %>%
kable()
?kable
read_xlsx("inst/extdata/input_files/test.xlsx")[1:10, 1] %>%
kable()
?kable_styling
?read_xlsx
read_xlsx("inst/extdata/input_files/test.xlsx", na = " ")[1:8, 1] %>%
kable()
read_xlsx("inst/extdata/input_files/test.xlsx", na = "pussy")[1:9, 1] %>%
kable()
read_xlsx("inst/extdata/input_files/test.xlsx", na = "pussy")[1:7, 1] %>%
kable()
?library
library(c(quicR, dplyr, readxl))
organize_tables("inst/extdata/input_files/test.xlsx")[["Sample IDs"]]
library(quicR)
organize_tables("inst/extdata/input_files/test.xlsx")[["Sample IDs"]]
library(quicR)
library(dplyr)
organize_tables("inst/extdata/input_files/test.xlsx")[["Sample IDs"]]
library(quicR)
library(dplyr)
library(kableExtra)
tabs <- organize_tables("inst/extdata/input_files/test3.xlsx")
kable(tabs)
convert_tables(tabs) %>% head()
library(quicR)
library(dplyr)
library(kableExtra)
file <- "inst/extdata/input_files/test3.xlsx"
tabs <- organize_tables(file)
kable(c(tabs[2], tabs[3]))
convert_tables(tabs) %>% head()
df_ <- get_real(file)
sample_file <- "inst/extdata/BMG_formatting/plate_layout.csv"
read.csv(sample_file)
?read.csv
??read.csv
??read_csv
library(readr)
?read_csv
read_csv(sample_file, col_names = FALSE)
read_csv(sample_file, col_names = FALSE)
read_csv(sample_file, col_names = FALSE)
read_csv(sample_file) %>% kable()
?BMG_format
BMG_format(sample_file, write_file = FALSE)
BMG_format(sample_file, write_file = FALSE) %>% class()
BMG_format(sample_file, write_file = FALSE) %>% kable()
?kable
?kable_styling
BMG_format(sample_file, write_file = FALSE)[1:15]
BMG_format(sample_file, write_file = FALSE) %>% c()
BMG_format(sample_file, write_file = FALSE) %>% list()
BMG_format(sample_file, write_file = FALSE)
BMG_format(sample_file, write_file = FALSE)[1:18]
df_norm <- normalize_RFU(df_, transposed = FALSE)
df_norm <- normalize_RFU(df_, transposed = FALSE)
df_ <- get_real(file, ordered = FALSE)[[1]] %>% as.data.frame()
df_norm <- normalize_RFU(df_, transposed = FALSE)
dic <- file %>%
quicR::organize_tables() %>%
quicR::convert_tables()
data.frame("Sample_ID" = df_norm$`Sample ID`) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = quicR::calculate_TtT(
df_norm,
threshold = threshold, start_col = 3, run_time = hours
),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
data.frame("Sample_ID" = df_norm$`Sample ID`) %>%
mutate(
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = quicR::calculate_TtT(
df_norm,
threshold = threshold, start_col = 3, run_time = hours
),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
data.frame("Sample_ID" = df_norm$`Sample ID`) %>%
mutate(
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = quicR::calculate_TtT(
df_norm,
threshold = threshold, start_col = 3
),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
data.frame("Sample_ID" = df_norm$`Sample ID`) %>%
mutate(
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = quicR::calculate_TtT(
df_norm,
threshold = 2, start_col = 3
),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
# Define the number of hours that the rxn ran for.
hours <- as.numeric(colnames(df_norm)[ncol(df_norm)])
data.frame("Sample_ID" = df_norm$`Sample ID`) %>%
mutate(
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = quicR::calculate_TtT(
df_norm,
threshold = 2, start_col = 3
),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
View(df_norm)
df_norm <- normalize_RFU(df_, transposed = FALSE)
# Define the number of hours that the rxn ran for.
hours <- as.numeric(colnames(df_norm)[ncol(df_norm)])
data.frame("Sample IDs" = df_norm$`Sample IDs`) %>%
mutate(
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
data.frame("Sample IDs" = dic$`Sample IDs`) %>%
mutate(
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
dic$`Sample IDs`
samples <- dic$`Sample IDs` %>% na.omit()
data.frame("Sample IDs" = samples) %>%
mutate(
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
)
View(df_)
View(df_norm)
View(dic)
df_norm <- normalize_RFU(df_, bg_cycle = 4, transposed = FALSE)[1:15, 1:12] %>%
mutate_at(2:ncol(.), ~round(as.numeric(.), 2))
df_norm
df_norm <- normalize_RFU(df_, bg_cycle = 4, transposed = FALSE)
