} else {
Var1 <- LETTERS[1:16]
},
if (plate == 96) {
Var2 <- sprintf("%02d", 1:12)
} else {
Var2 <- sprintf("%02d", 1:24)
}
)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
rm(Var1, Var2)
# Add columns with NAs if they do not exist.
for (col in template_columns) {
if (!(col %in% meta[[1]])) {
df[col] <- NA
}
}
# Combine the template_columns and sample_locations.
template_columns <- as.data.frame(template_columns)
colnames(template_columns) <- colnames(meta[1])
# Create a data.frame with all the wells and IDs, even if some are missing.
full <- meta |>
full_join(as.data.frame(template_columns)) |>
arrange_at(1) %>%
suppressMessages()
# Create the labeller function for the facet plot.
ID_labeller <- function(variable, value) {
i <- full[, 2][full[, 1] == value]
ifelse(is.na(i), " ", i)
}
df |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate("variable", c("Well", "ID"), "\\.", fill = "right") |>
# Ensures that Time and observations are numeric.
mutate(
"Time" = as.numeric(.data[["Time"]]),
"value" = as.numeric(.data[["value"]]),
"ID" = as.character(.data[["ID"]]),
"Well" = as.factor(.data[["Well"]])
) |>
mutate(ID = replace_na(.data[["ID"]], "none")) |>
# Create the facet plot.
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(
y = "RFU",
x = "Time (h)"
) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow = ifelse(plate == 96, 8, 16),
ncol = ifelse(plate == 96, 12, 24),
labeller = ID_labeller
) |>
suppressWarnings()
View(df_)
sample_locations <- get_sample_locations(file, dilution_bool = TRUE)
#'
#' # Wrap the text if it is too long.
#' sample_locations <- sample_locations |>
#'   dplyr::mutate(IDs = ifelse(stringr::str_length(IDs) > 12, gsub(" ", "\n", IDs), IDs))
#'
#' # Make the plate view figure.
#' plate_view(df_, sample_locations, plate = 96)
#' }
#'
#' @export
plate_view <- function(df, meta, plate = 96) {
if (plate != 96 & plate != 384) {
return("Invalid plate layout. Format should be either 96 or 384. ")
}
# Ensures that the input is a dataframe.
df <- data.frame(df)
colnames(df) <- c("Time", paste(meta[[1]], meta[[2]], sep = "."))
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {
Var1 <- LETTERS[1:8]
} else {
Var1 <- LETTERS[1:16]
},
if (plate == 96) {
Var2 <- sprintf("%02d", 1:12)
} else {
Var2 <- sprintf("%02d", 1:24)
}
)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
rm(Var1, Var2)
# Add columns with NAs if they do not exist.
for (col in template_columns) {
if (!(col %in% meta[[1]])) {
df[col] <- NA
}
}
# Add a "Time" column. This is important for the melt function.
# df <- cbind("Time" = rownames(df), df)
# Combine the template_columns and sample_locations.
template_columns <- as.data.frame(template_columns)
colnames(template_columns) <- colnames(meta[1])
# Create a data.frame with all the wells and IDs, even if some are missing.
full <- meta |>
full_join(as.data.frame(template_columns)) |>
arrange_at(1) %>%
suppressMessages()
# Create the labeller function for the facet plot.
ID_labeller <- function(variable, value) {
i <- full[, 2][full[, 1] == value]
ifelse(is.na(i), " ", i)
}
df |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate("variable", c("Well", "ID"), "\\.", fill = "right") |>
# Ensures that Time and observations are numeric.
mutate(
"Time" = as.numeric(.data[["Time"]]),
"value" = as.numeric(.data[["value"]]),
"ID" = as.character(.data[["ID"]]),
"Well" = as.factor(.data[["Well"]])
) |>
mutate(ID = replace_na(.data[["ID"]], "none")) |>
# Create the facet plot.
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(
y = "RFU",
x = "Time (h)"
) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow = ifelse(plate == 96, 8, 16),
ncol = ifelse(plate == 96, 12, 24),
labeller = ID_labeller
) |>
suppressWarnings()
}
plate_view(df_, sample_locations)
library(reshape2)
df_analyzed <- data.frame("Sample IDs" = samples) %>%
mutate(
Dilutions = -log10(dilutions),
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / TtT),
# Crossed threshold?
crossed = TtT != hours
)
library(quicR)
library(dplyr)
library(kableExtra)
library(readxl)
library(readr)
library(ggplot2)
library(reshape2)
file <- "../../inst/extdata/input_files/test3.xlsx"
sample_file <- "../../inst/extdata/BMG_formatting/plate_layout.csv"
BMG_format(sample_file, write_file = FALSE)[1:18] %>%
as.data.frame()
tabs <- organize_tables(file)[-1]
tabs
tabs <- convert_tables(tabs)
tabs %>% head(15) %>% kable(row.names = FALSE)
get_meta(file) %>% as.data.frame()
df_ <- get_real(file, ordered = FALSE)[[1]] %>% as.data.frame()
df_[1:15, 1:6] %>% kable(row.names = FALSE)
transpose_real(df_)[1:15, 1:13] %>% kable(row.names = FALSE)
df_norm <- normalize_RFU(df_, bg_cycle = 4, transposed = FALSE)
df_norm[1:15, 1:12] %>%
mutate_at(2:ncol(.), ~round(as.numeric(.), 2)) %>%
kable(row.names = FALSE)
samples <- tabs$`Sample IDs` %>% na.omit()
dilutions <- tabs$Dilutions %>% na.omit() %>% as.numeric()
# Define the number of hours that the rxn ran for.
hours <- as.numeric(colnames(df_norm)[ncol(df_norm)])
df_analyzed <- data.frame("Sample IDs" = samples) %>%
mutate(
Dilutions = -log10(dilutions),
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / TtT),
# Crossed threshold?
crossed = TtT != hours
)
df_analyzed%>%
head(15) %>%
kable(row.names = FALSE)
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE)
plate_view(df_, sample_locations)
df_analyzed %>%
melt()
ggplot(aes())
View(df_analyzed)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions"))
?data.frame
df_analyzed <- data.frame("Sample IDs" = samples, check.names = FALSE) %>%
mutate(
Dilutions = -log10(dilutions),
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / TtT),
# Crossed threshold?
crossed = TtT != hours
)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions"))
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions")) %>%
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions")) %>%
mutate_at(Dilutions, as.factor) %>%
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions")) %>%
mutate_at("Dilutions", as.factor) %>%
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable)
df_analyzed %>%
select(-crossed) %>%
melt(id.vars = c("Sample IDs", "Dilutions")) %>%
mutate_at("Dilutions", as.factor) %>%
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name = "Sample IDs", dilution_bool = FALSE, dilution_fun = function(x) 1*x, plate = 96) {
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages() %>%
na.omit()
)[[tab_name]],
row.names = NULL
) %>%
na.omit() %>%
mutate(
"IDs" = ifelse(
str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
sapply(dilution_fun)
na.omit()
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name = "Sample IDs", dilution_bool = FALSE, dilution_fun = function(x) 1*x, plate = 96) {
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages() %>%
na.omit()
)[[tab_name]],
row.names = NULL
) %>%
na.omit() %>%
mutate(
"IDs" = ifelse(
str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
sapply(dilution_fun) %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
}
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE,
dilution_func = function(x) -log10(x))
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE,
dilution_fun = function(x) -log10(x))
View(sample_locations)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name = "Sample IDs", dilution_bool = FALSE, dilution_fun = ~ 1 * ., plate = 96) {
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages() %>%
na.omit()
)[[tab_name]],
row.names = NULL
) %>%
na.omit() %>%
mutate(
"IDs" = ifelse(
str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
sapply(dilution_fun) %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
}
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name = "Sample IDs", dilution_bool = FALSE, dilution_fun = NULL, plate = 96) {
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages() %>%
na.omit()
)[[tab_name]],
row.names = NULL
) %>%
na.omit() %>%
mutate(
"IDs" = ifelse(
str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
sapply(dilution_fun) %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
}
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE)
#'
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test.xlsx",
#'   package = "quicR"
#' )
#' get_sample_locations(file, "Sample IDs", TRUE, 96)
#'
#' @export
get_sample_locations <- function(file, tab_name = "Sample IDs", dilution_bool = FALSE, dilution_fun = function(x) 1*x, plate = 96) {
data.frame(
wells = get_wells(file),
IDs = (
organize_tables(file, plate = plate) %>%
convert_tables() %>%
suppressMessages() %>%
na.omit()
)[[tab_name]],
row.names = NULL
) %>%
na.omit() %>%
mutate(
"IDs" = ifelse(
str_length(.[["IDs"]]) > 12,
gsub(" ", "\n", .[["IDs"]]),
.[["IDs"]]
),
"IDs" = if (dilution_bool) {
paste(
as.character(.[["IDs"]]),
"\n",
(organize_tables(file) %>%
convert_tables() %>%
suppressMessages())[["Dilutions"]] %>%
as.numeric() %>%
sapply(dilution_fun) %>%
na.omit()
)
} else {
.[["IDs"]]
}
)
}
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(file, dilution_bool = TRUE)
View(sample_locations)
#| fig-width: 8
#| fig-height: 7
sample_locations <- get_sample_locations(
file,
dilution_bool = TRUE,
dilution_fun = function(x) -log10(x)
)
plate_view(df_, sample_locations)
