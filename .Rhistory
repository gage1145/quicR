x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, "label_value")
) |>
suppressWarnings()
df |>
# Add a "Time" column. This is important for the melt function.
bind_cols(Time = rownames(df)) |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate(variable, c("ID", "Well"), "_", fill="left") |>
# Ensures that Time and observations are numeric.
mutate(Time = as.numeric(Time),
value = as.numeric(value),
ID = as.character(ID),
Well = as.factor(Well)) |>
mutate(ID = replace_na(ID, "none")) |>
# Create the facet plot.
ggplot(aes(x=Time, y=value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, ID)
) |>
suppressWarnings()
meta <- data.frame(V1 = colnames(df), value = template_columns)
View(wells)
meta <- data.frame(V1 = colnames(df), value = c(template_columns))
View(meta)
df <- df2
meta <- NULL
# Ensures that the input is a dataframe.
df <- data.frame(df)
df <- df2
# Ensures that the input is a dataframe.
df <- data.frame(df)
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {Var1 = LETTERS[1:8]}
else {Var1 = LETTERS[1:16]},
if (plate == 96) {Var2 = sprintf("%02d", 1:12)}
else {Var2 = sprintf("%02d", 1:24)}
)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
rm(Var1, Var2)
if (!is.null(meta)) {
colnames(df) <- paste(meta[,2], meta[,1], sep="_")
# Add columns with NAs if they do not exist.
for (col in template_columns) {
if (!(col %in% meta[,1])) {
df[[col]] <- NA
}
}
# Combine the template_columns and sample_locations.
template_columns <- as.data.frame(template_columns)
colnames(template_columns) <- colnames(meta[1])
# Create a data.frame with all the wells and IDs, even if some are missing.
# full <- sample_locations |>
#   full_join(as.data.frame(template_columns)) |>
#   arrange_at(1)
} else {
meta <- data.frame(V1 = colnames(df), value = c(template_columns))
colnames(df) <- paste(colnames(df), template_columns, sep = "_")
}
# Create the labeller function for the facet plot.
ID_labeller <- function(variable, value) {
i <- meta[,2][meta[,1] == value]
ifelse(is.na(i), " ", i)
}
df |>
# Add a "Time" column. This is important for the melt function.
bind_cols(Time = rownames(df)) |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate(variable, c("ID", "Well"), "_", fill="left") |>
# Ensures that Time and observations are numeric.
mutate(Time = as.numeric(Time),
value = as.numeric(value),
ID = as.character(ID),
Well = as.factor(Well)) |>
mutate(ID = replace_na(ID, "none")) |>
# Create the facet plot.
ggplot(aes(x=Time, y=value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, )
) |>
suppressWarnings()
View(meta)
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
# Read in the real-time data.
# "get_real" will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered=FALSE)
df_id <- as.integer(
readline(
paste(
"There are",
length(df_list),
"real-time data sets. Please enter a number in that range: "
)
)
)
df <- as.data.frame(df_list[[df_id]])
# Set the time column as the df index.
rownames(df) <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
if (is.character(file)) {
df <- read_excel(file, sheet = 2, col_names = FALSE)
}
if (is.character(file)) {
df <- read_excel(file, sheet = 2, col_names = FALSE)
} else if (is.data.frame(file)) {
df <- file
} else {
stop("Please enter either .xlsx string or dataframe. ")
}
# Get the wells used in the run.
for (i in 1: nrow(df)) {
while (is.na(df[i, 1])) {
i <- i + 1
}
if (df[i, 1] == "Well") {
wells <- c(df[i, ])
break
}
}
View(wells)
wells <- wells[-(1:2)] |>
as.data.frame() |>
t() |>
as.data.frame()
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- cbind(wells, IDs) |> na.omit()
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations |>
dplyr::mutate(Dilutions = dilutions$value) |>
tidyr::unite(value, value:Dilutions, sep = "\n")
}
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
file <- "tests/testthat/input_files/test3.xlsx"
plate = 96
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
df_id <- 1
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
# Read in the real-time data.
# "get_real" will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered=FALSE)
df <- as.data.frame(df_list[[df_id]])
# Set the time column as the df index.
rownames(df) <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Get the wells used in the run.
wells <- quicR::get_wells(file)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- cbind(wells, IDs) |> na.omit()
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations |>
dplyr::mutate(Dilutions = dilutions$value) |>
tidyr::unite(value, value:Dilutions, sep = "\n")
}
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
?t
file <- "tests/testthat/input_files/test3.xlsx"
plate = 96
df_id <- 1
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
}
}
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind()
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
print(i)
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind()
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind(df_, i)
}
}
return (df_)
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind(df_, i)
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
tab <- df_dic
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_ <- cbind(df_, i)
}
print(names(i))
View(df_dic)
print(names(tab))
print(names(tab[1]))
tab[i]
tab[1]
tab[[1]]
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
i = 1
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
View(column)
df_ <- data.frame()
df_ <- cbind(df_, column)
df_list <- append(df_list, column)
df_list <- data.frame()
df_list <- append(df_list, column)
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[1]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[i]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
View(df_list)
cbind(df_list)
df_ <- cbind(df_list)
View(df_)
df_ <- as.data.frame(df_list)
View(df_)
colnames(df_) <- names(tab)
#'
#'  convert_tables accepts a table or matrix or a list of tables and matrices
#'  and converts them into dataframe columns.
#'
#'  @param tab A table/matrix or a list of tables/matrices.
#'
#'  @importFrom tidyr gather
#'  @importFrom dplyr select
#'
#'  @export
convert_tables <- function (tab) {
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[i]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
df_ <- as.data.frame(df_list)
colnames(df_) <- names(tab)
return (df_)
}
IDs <- convert_tables(df_dic)
View(IDs)
IDs <- convert_tables(df_dic)$`Sample IDs`
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(value = -log10(as.numeric(value)))
library(dplyr)
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(value = -log10(as.numeric(value)))
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(Dilutions = -log10(as.numeric(Dilutions)))
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
-log10()
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
(-log10())
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
log10() * -1
styler::style_dir()
setwd("~/Work/RTQ_analysis/tests/testthat/input_files")
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("~/Work/RTQ_analysis/tests/testthat/input_files")
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
