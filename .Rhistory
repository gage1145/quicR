# Select the real-time data set that the user signified.
df <- df[[df_id]]
# Export the tables in the first sheet of the file.
dic <- file %>%
quicR::organize_tables() %>%
quicR::convert_tables()
df_norm <- df %>%
transpose_real() %>%
normalize_RFU(transposed = TRUE)
View(df_norm)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(dic)
if (dilution_bool) dilutions <- dic$Dilutions %>% na.omit()
# Define the number of hours that the rxn ran for.
hours <- as.numeric(colnames(df_norm)[ncol(df_norm)])
# Initialized the dataframe with the calculated metrics.
df_analyzed <- plot_metrics(df_norm, dic)
View(dic)
# Initialized the dataframe with the calculated metrics.
df_analyzed <- plot_metrics(df_norm, dic) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
# MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# # Max Slope
# MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# # Time to Threshold
# TtT = quicR::calculate_TtT(df_norm, threshold = threshold, start_col = 3),
# # Rate of Amyloid Formation
# RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
) %>%
# Order the data frame based on Sample_ID.
arrange(Sample_ID)
?plot_metrics
?calculate_metrics
# Initialized the dataframe with the calculated metrics.
df_analyzed <- calculate_metrics(df_norm, dic) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
# MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# # Max Slope
# MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# # Time to Threshold
# TtT = quicR::calculate_TtT(df_norm, threshold = threshold, start_col = 3),
# # Rate of Amyloid Formation
# RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
) %>%
# Order the data frame based on Sample_ID.
arrange(Sample_ID)
# Initialized the dataframe with the calculated metrics.
df_analyzed <- calculate_metrics(df_norm, dic) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
# MPR = quicR::calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# # Max Slope
# MS = quicR::calculate_MS(df_norm, data_is_norm = TRUE),
# # Time to Threshold
# TtT = quicR::calculate_TtT(df_norm, threshold = threshold, start_col = 3),
# # Rate of Amyloid Formation
# RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
) %>%
# Order the data frame based on Sample_ID.
arrange(`Sample IDs`)
View(df_analyzed)
summary <- df_analyzed %>%
group_by(`Sample IDs`, Dilutions)
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(`Sample IDs`, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
mean_RAF  = mean(RAF),
mean_MPR  = mean(MPR),
mean_MS   = mean(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
formula <- as.formula(
paste0(
metric, " ~ `Sample IDs`", ifelse(dilution_bool, " + Dilutions", "")
)
)
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(formula = formula, data = df_analyzed),
trt = if (dilution_bool) c("Sample IDs", "Dilutions") else "Sample IDs",
p.adj = "none", group = FALSE
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-c("difference", "LCL", "UCL")) %>%
# Remove all comparisons that are not against "N".
subset(
V1 == "N" |
str_detect(V1, "N:") |
str_detect(V1, "N_") |
V2 == "N" |
str_detect(V2, "N:") |
str_detect(V2, "N_")
) %>%
mutate(
V1_dilutions = str_split_i(V1, ":", 2),
V1 = str_split_i(V1, ":", 1),
V2_dilutions = str_split_i(V2, ":", 2),
V2 = str_split_i(V2, ":", 1)
) %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N" | str_detect(V1, "N_"), NA),
V2 = replace(V2, V2 == "N" | str_detect(V2, "N_"), NA),
V1_dilutions = ifelse(is.na(V1), NA, V1_dilutions),
V2_dilutions = ifelse(is.na(V2), NA, V2_dilutions)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = TRUE
) %>%
unite(
Dilutions,
c("V1_dilutions", "V2_dilutions"),
sep = "",
na.rm = TRUE
) %>%
rbind(c(NA, NA, "N", -3)) %>%
mutate_at(c(1, 4), as.double)
summary <- left_join(summary, comps)
}
library(agricolae)
for (metric in metrics) {
formula <- as.formula(
paste0(
metric, " ~ `Sample IDs`", ifelse(dilution_bool, " + Dilutions", "")
)
)
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(formula = formula, data = df_analyzed),
trt = if (dilution_bool) c("Sample IDs", "Dilutions") else "Sample IDs",
p.adj = "none", group = FALSE
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-c("difference", "LCL", "UCL")) %>%
# Remove all comparisons that are not against "N".
subset(
V1 == "N" |
str_detect(V1, "N:") |
str_detect(V1, "N_") |
V2 == "N" |
str_detect(V2, "N:") |
str_detect(V2, "N_")
) %>%
mutate(
V1_dilutions = str_split_i(V1, ":", 2),
V1 = str_split_i(V1, ":", 1),
V2_dilutions = str_split_i(V2, ":", 2),
V2 = str_split_i(V2, ":", 1)
) %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N" | str_detect(V1, "N_"), NA),
V2 = replace(V2, V2 == "N" | str_detect(V2, "N_"), NA),
V1_dilutions = ifelse(is.na(V1), NA, V1_dilutions),
V2_dilutions = ifelse(is.na(V2), NA, V2_dilutions)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = TRUE
) %>%
unite(
Dilutions,
c("V1_dilutions", "V2_dilutions"),
sep = "",
na.rm = TRUE
) %>%
rbind(c(NA, NA, "N", -3)) %>%
mutate_at(c(1, 4), as.double)
summary <- left_join(summary, comps)
}
View(summary)
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
# Initialized the dataframe with the calculated metrics.
df_analyzed <- calculate_metrics(df_norm, dic) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Crossed threshold?
crossed = TtT != hours
) %>%
rename(Sample_ID = `Sample IDs`) %>%
# Order the data frame based on Sample_ID.
arrange(`Sample IDs`)
# Initialized the dataframe with the calculated metrics.
df_analyzed <- calculate_metrics(df_norm, dic) %>%
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Crossed threshold?
crossed = TtT != hours
) %>%
rename(Sample_ID = `Sample IDs`) %>%
# Order the data frame based on Sample_ID.
arrange(Sample_ID)
View(df_analyzed)
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(Sample_ID, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
mean_RAF  = mean(RAF),
mean_MPR  = mean(MPR),
mean_MS   = mean(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
formula <- as.formula(
paste0(
metric, " ~ Sample_ID", ifelse(dilution_bool, " + Dilutions", "")
)
)
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(formula = formula, data = df_analyzed),
trt = if (dilution_bool) c("Sample_ID", "Dilutions") else "Sample_ID",
p.adj = "none", group = FALSE
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-c("difference", "LCL", "UCL")) %>%
# Remove all comparisons that are not against "N".
subset(
V1 == "N" |
str_detect(V1, "N:") |
str_detect(V1, "N_") |
V2 == "N" |
str_detect(V2, "N:") |
str_detect(V2, "N_")
) %>%
mutate(
V1_dilutions = str_split_i(V1, ":", 2),
V1 = str_split_i(V1, ":", 1),
V2_dilutions = str_split_i(V2, ":", 2),
V2 = str_split_i(V2, ":", 1)
) %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N" | str_detect(V1, "N_"), NA),
V2 = replace(V2, V2 == "N" | str_detect(V2, "N_"), NA),
V1_dilutions = ifelse(is.na(V1), NA, V1_dilutions),
V2_dilutions = ifelse(is.na(V2), NA, V2_dilutions)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = TRUE
) %>%
unite(
Dilutions,
c("V1_dilutions", "V2_dilutions"),
sep = "",
na.rm = TRUE
) %>%
rbind(c(NA, NA, "N", -3)) %>%
mutate_at(c(1, 4), as.double)
summary <- left_join(summary, comps)
}
View(summary)
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill = NA, size = 1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
plot_metrics(dilution_bool = dilution_bool) +
# {
#   if (dilution_bool) {
#     reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
#       mutate(Dilutions = as.factor(desc(Dilutions))) %>%
#       ggplot(aes(Sample_ID, value, fill = Dilutions))
#   } else {
#     reshape2::melt(., id.vars = "Sample_ID") %>%
#       ggplot(aes(Sample_ID, value))
#   }
# } +
#
# geom_boxplot(
#   outlier.shape = NA,
#   position = "dodge"
# ) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
# facet_wrap(
#   vars(variable),
#   scales = "free",
#   labeller = as_labeller(
#     c(
#       MPR = "MPR (Max RFU / Initial RFU)",
#       RAF = "RAF (1/s)",
#       MS  = "Max Slope (RFU/s)",
#       TtT = "Time to Threshold (h)"
#     )
#   ),
#   strip.position = "left"
# ) +
#
# ylim(0, NA) +
# xlab(NULL) +
# ylab(NULL) +
# theme(
#   axis.line = element_line(colour = "black"),
#   axis.text.x = element_text(angle = 45, hjust = 1),
#   panel.background = element_blank(),
#   panel.grid = element_line(colour = "lightgrey"),
#   panel.border = element_rect(colour = "black", fill = NA, size = 1),
#   strip.background = element_blank(),
#   strip.placement = "outside"
# )
ggsave("summary.png", width = 4000, height = 2500, units = "px")
df_analyzed %>%
select(-crossed) %>%
plot_metrics("Sample_ID", "Dilutions", dilution_bool = dilution_bool) +
# {
#   if (dilution_bool) {
#     reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
#       mutate(Dilutions = as.factor(desc(Dilutions))) %>%
#       ggplot(aes(Sample_ID, value, fill = Dilutions))
#   } else {
#     reshape2::melt(., id.vars = "Sample_ID") %>%
#       ggplot(aes(Sample_ID, value))
#   }
# } +
#
# geom_boxplot(
#   outlier.shape = NA,
#   position = "dodge"
# ) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
# facet_wrap(
#   vars(variable),
#   scales = "free",
#   labeller = as_labeller(
#     c(
#       MPR = "MPR (Max RFU / Initial RFU)",
#       RAF = "RAF (1/s)",
#       MS  = "Max Slope (RFU/s)",
#       TtT = "Time to Threshold (h)"
#     )
#   ),
#   strip.position = "left"
# ) +
#
# ylim(0, NA) +
# xlab(NULL) +
# ylab(NULL) +
# theme(
#   axis.line = element_line(colour = "black"),
#   axis.text.x = element_text(angle = 45, hjust = 1),
#   panel.background = element_blank(),
#   panel.grid = element_line(colour = "lightgrey"),
#   panel.border = element_rect(colour = "black", fill = NA, size = 1),
#   strip.background = element_blank(),
#   strip.placement = "outside"
# )
ggsave("summary.png", width = 4000, height = 2500, units = "px")
df_analyzed %>%
select(-crossed) %>%
plot_metrics("Sample_ID", "Dilutions", dilution_bool = dilution_bool) +
# {
#   if (dilution_bool) {
#     reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
#       mutate(Dilutions = as.factor(desc(Dilutions))) %>%
#       ggplot(aes(Sample_ID, value, fill = Dilutions))
#   } else {
#     reshape2::melt(., id.vars = "Sample_ID") %>%
#       ggplot(aes(Sample_ID, value))
#   }
# } +
#
# geom_boxplot(
#   outlier.shape = NA,
#   position = "dodge"
# ) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
)
