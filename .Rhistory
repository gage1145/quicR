x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, "label_value")
) |>
suppressWarnings()
df |>
# Add a "Time" column. This is important for the melt function.
bind_cols(Time = rownames(df)) |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate(variable, c("ID", "Well"), "_", fill="left") |>
# Ensures that Time and observations are numeric.
mutate(Time = as.numeric(Time),
value = as.numeric(value),
ID = as.character(ID),
Well = as.factor(Well)) |>
mutate(ID = replace_na(ID, "none")) |>
# Create the facet plot.
ggplot(aes(x=Time, y=value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, ID)
) |>
suppressWarnings()
meta <- data.frame(V1 = colnames(df), value = template_columns)
View(wells)
meta <- data.frame(V1 = colnames(df), value = c(template_columns))
View(meta)
df <- df2
meta <- NULL
# Ensures that the input is a dataframe.
df <- data.frame(df)
df <- df2
# Ensures that the input is a dataframe.
df <- data.frame(df)
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {Var1 = LETTERS[1:8]}
else {Var1 = LETTERS[1:16]},
if (plate == 96) {Var2 = sprintf("%02d", 1:12)}
else {Var2 = sprintf("%02d", 1:24)}
)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
rm(Var1, Var2)
if (!is.null(meta)) {
colnames(df) <- paste(meta[,2], meta[,1], sep="_")
# Add columns with NAs if they do not exist.
for (col in template_columns) {
if (!(col %in% meta[,1])) {
df[[col]] <- NA
}
}
# Combine the template_columns and sample_locations.
template_columns <- as.data.frame(template_columns)
colnames(template_columns) <- colnames(meta[1])
# Create a data.frame with all the wells and IDs, even if some are missing.
# full <- sample_locations |>
#   full_join(as.data.frame(template_columns)) |>
#   arrange_at(1)
} else {
meta <- data.frame(V1 = colnames(df), value = c(template_columns))
colnames(df) <- paste(colnames(df), template_columns, sep = "_")
}
# Create the labeller function for the facet plot.
ID_labeller <- function(variable, value) {
i <- meta[,2][meta[,1] == value]
ifelse(is.na(i), " ", i)
}
df |>
# Add a "Time" column. This is important for the melt function.
bind_cols(Time = rownames(df)) |>
# Melt the data to help with the faceting.
reshape2::melt(id.vars = "Time") |>
# Separate the wells from the IDs.
separate(variable, c("ID", "Well"), "_", fill="left") |>
# Ensures that Time and observations are numeric.
mutate(Time = as.numeric(Time),
value = as.numeric(value),
ID = as.character(ID),
Well = as.factor(Well)) |>
mutate(ID = replace_na(ID, "none")) |>
# Create the facet plot.
ggplot(aes(x=Time, y=value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic() +
theme(
panel.border = element_rect(colour="black", fill=NA, linewidth=0.5),
strip.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller = ifelse(!is.null(meta), ID_labeller, )
) |>
suppressWarnings()
View(meta)
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
# Read in the real-time data.
# "get_real" will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered=FALSE)
df_id <- as.integer(
readline(
paste(
"There are",
length(df_list),
"real-time data sets. Please enter a number in that range: "
)
)
)
df <- as.data.frame(df_list[[df_id]])
# Set the time column as the df index.
rownames(df) <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
if (is.character(file)) {
df <- read_excel(file, sheet = 2, col_names = FALSE)
}
if (is.character(file)) {
df <- read_excel(file, sheet = 2, col_names = FALSE)
} else if (is.data.frame(file)) {
df <- file
} else {
stop("Please enter either .xlsx string or dataframe. ")
}
# Get the wells used in the run.
for (i in 1: nrow(df)) {
while (is.na(df[i, 1])) {
i <- i + 1
}
if (df[i, 1] == "Well") {
wells <- c(df[i, ])
break
}
}
View(wells)
wells <- wells[-(1:2)] |>
as.data.frame() |>
t() |>
as.data.frame()
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- cbind(wells, IDs) |> na.omit()
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations |>
dplyr::mutate(Dilutions = dilutions$value) |>
tidyr::unite(value, value:Dilutions, sep = "\n")
}
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
file <- "tests/testthat/input_files/test3.xlsx"
plate = 96
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
df_id <- 1
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
# Read in the real-time data.
# "get_real" will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered=FALSE)
df <- as.data.frame(df_list[[df_id]])
# Set the time column as the df index.
rownames(df) <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Get the wells used in the run.
wells <- quicR::get_wells(file)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- cbind(wells, IDs) |> na.omit()
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations |>
dplyr::mutate(Dilutions = dilutions$value) |>
tidyr::unite(value, value:Dilutions, sep = "\n")
}
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
# Run plate_view function which produces a plate view figure.
quicR::plate_view(df, sample_locations, plate)
?t
file <- "tests/testthat/input_files/test3.xlsx"
plate = 96
df_id <- 1
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
IDs <- df_dic[["Sample IDs"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- df_dic[["Dilutions"]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value) |>
dplyr::mutate(value = -log10(as.numeric(value)))
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
}
}
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind()
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
print(i)
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind()
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind(df_, i)
}
}
return (df_)
}
convert_tables <- function (tab) {
df_ <- data.frame()
if (is.vector(tab)) {
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
df_ <- cbind(df_, i)
}
}
return (df_)
}
IDs <- convert_tables(df_dic)
tab <- df_dic
for (i in tab) {
print(i)
i <- i |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_ <- cbind(df_, i)
}
print(names(i))
View(df_dic)
print(names(tab))
print(names(tab[1]))
tab[i]
tab[1]
tab[[1]]
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
i = 1
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
View(column)
df_ <- data.frame()
df_ <- cbind(df_, column)
df_list <- append(df_list, column)
df_list <- data.frame()
df_list <- append(df_list, column)
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[1]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[i]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
View(df_list)
cbind(df_list)
df_ <- cbind(df_list)
View(df_)
df_ <- as.data.frame(df_list)
View(df_)
colnames(df_) <- names(tab)
#'
#'  convert_tables accepts a table or matrix or a list of tables and matrices
#'  and converts them into dataframe columns.
#'
#'  @param tab A table/matrix or a list of tables/matrices.
#'
#'  @importFrom tidyr gather
#'  @importFrom dplyr select
#'
#'  @export
convert_tables <- function (tab) {
df_list <- data.frame()
if (is.vector(tab)) {
for (i in 1: length(tab)) {
print(names(tab[i]))
column <- tab[[i]] |>
t() |>
as.data.frame() |>
tidyr::gather() |>
dplyr::select(value)
print(i)
df_list <- append(df_list, column)
}
}
df_ <- as.data.frame(df_list)
colnames(df_) <- names(tab)
return (df_)
}
IDs <- convert_tables(df_dic)
View(IDs)
IDs <- convert_tables(df_dic)$`Sample IDs`
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(value = -log10(as.numeric(value)))
library(dplyr)
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(value = -log10(as.numeric(value)))
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
dplyr::mutate(Dilutions = -log10(as.numeric(Dilutions)))
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
-log10()
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
(-log10())
# dilutions <- df_dic[["Dilutions"]] |>
#   t() |>
#   as.data.frame() |>
#   tidyr::gather() |>
#   dplyr::select(value) |>
#   dplyr::mutate(value = -log10(as.numeric(value)))
dilutions <- convert_tables(df_dic)$Dilutions |>
as.numeric() |>
log10() * -1
styler::style_dir()
setwd("~/Work/RTQ_analysis/tests/testthat/input_files")
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("~/Work/RTQ_analysis/tests/testthat/input_files")
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col=3, data_is_norm=TRUE),
# Max Slope
MS  = quicR::calculate_MS(df_norm, start_col=3),
# Time to Threshold
TtT = quicR::calculate_TtT(df_norm, threshold=threshold, start_col=3, run_time=hours)
) %>%
mutate(
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
) %>%
# Order the data frame based on Sample_ID.
arrange(Sample_ID)
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(Sample_ID, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}
) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
sd_TtT    = sd(TtT),
mean_RAF  = mean(RAF),
sd_RAF    = sd(RAF),
mean_MPR  = mean(MPR),
sd_MPR    = sd(MPR),
mean_MS   = mean(MS),
sd_MS     = sd(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(as.formula(paste0(metric, " ~ ", "Sample_ID")),
data = df_analyzed),
"Sample_ID",  p.adj = "holm", group = F
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-difference) %>%
# Remove all comparisons that are not against "N".
subset(V1 == "N" | V2 == "N") %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N", NA),
V2 = replace(V2, V2 == "N", NA)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = T
) %>%
rbind(c(NA, NA, "N"))
summary <- left_join(summary, comps)
}
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
library(openxlsx)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = Dilutions),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool == TRUE) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = Dilutions),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = ifelse(dilution_bool, Dilutions, Sample_ID)),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = ifelse(dilution_bool, Dilutions, NA)),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
View(df_analyzed)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
ggsave("summary.png", width = 4000, height = 2500, units = "px")
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(Sample_ID, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}
) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
sd_TtT    = sd(TtT),
mean_RAF  = mean(RAF),
sd_RAF    = sd(RAF),
mean_MPR  = mean(MPR),
sd_MPR    = sd(MPR),
mean_MS   = mean(MS),
sd_MS     = sd(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(as.formula(paste0(metric, " ~ ", "Sample_ID")),
data = df_analyzed),
"Sample_ID",  p.adj = "holm", group = F
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-difference) %>%
# Remove all comparisons that are not against "N".
subset(V1 == "N" | V2 == "N") %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N", NA),
V2 = replace(V2, V2 == "N", NA)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = T
) %>%
rbind(c(NA, NA, "N"))
summary <- left_join(summary, comps)
}
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
View(summary)
summary <- summary %>%
mutate(Positive = thres_pos == TRUE & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
summary <- summary %>%
mutate(Positive = MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
summary <- summary %>%
mutate(Positive = MPR_pvalue <= 0.05)
summary <- summary %>%
mutate(
Positive = (thres_pos) & (MPR_pvalue <= 0.05) & (MS_pvalue <= 0.05)
)
Positive = ((MS_pvalue <= 0.05)
summary <- summary %>%
mutate(
Positive = (MS_pvalue <= 0.05)
)
1e-4 < 0.05
summary <- summary %>%
mutate(
MPR_pvalue = as.numeric(MPR_pvalue),
MS_pvalue = as.numeric(MS_pvalue),
Positive = (thres_pos) & (MPR_pvalue <= 0.05) & (MS_pvalue <= 0.05)
)
summary <- summary %>%
mutate(
MPR_pvalue = as.numeric(MPR_pvalue),
MS_pvalue = as.numeric(MS_pvalue),
Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05
)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
ggsave("summary.png", width = 4000, height = 2500, units = "px")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
setwd("~/RT-QuIC Data/20240827_pr2_RL_practiceNano")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
setwd("~/RT-QuIC Data/20240829_pr1_GR_feces n swabs")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
source("~/RTQ_analysis/BMG_format.R", echo=TRUE)
source("~/RTQ_analysis/BMG_format.R", echo=TRUE)
=======
template_columns[sample_locations$A == value]
ID_labeller <- function(variable, value) {
template_columns[sample_locations$A == value]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller())
ID_labeller <- function(variable, value) {
template_columns[sample_locations$A == value]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller())
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
value <- "A01"
i <- template_columns[sample_locations$A == value]
rm(i)
i <- template_columns[sample_locations$A == value]
i <- template_columns[sample_locations$A == value][1]
value <- "H12"
i <- template_columns[sample_locations$A == value][1]
ID_labeller <- function(variable, value) {
i <- template_columns[sample_locations$A == value][1]
ifelse(is.na(i), " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- template_columns[sample_locations$A == value]
ifelse(is.na(i), " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- template_columns[sample_locations$A == value]
ifelse(is.na(i), return (" "), return (i))
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
i <- sample_locations$B[sample_locations$A == value]
ID_labeller <- function(variable, value) {
i <- sample_locations$B[sample_locations$A == value]
ifelse(is.null(i), " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- sample_locations$B[sample_locations$A == value]
ifelse(i=="", " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- sample_locations$B[sample_locations$A == value]
ifelse(i=='', " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- df$ID[df$Well == value]
ifelse(i=="empty", " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
df$ID[df$Well == value]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
unique(df$ID)
ID_labeller <- function(variable, value) {
unique(df$ID)[df$Well == value]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
df$ID[df$Well == value]
df$ID[df$Well == value][1]
ID_labeller <- function(variable, value) {
df$ID[df$Well == value][1]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
value = "A01"
df$ID[df$Well == value][1]
value = "A02"
df$ID[df$Well == value][1]
df$ID[df$Well == value][[1]]
ID_labeller <- function(variable, value) {
df$ID[df$Well == value][[1]]
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
return (df$ID[df$Well == value][[1]])
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
View(df)
View(sample_locations)
View(sample_locations)
left_join(sample_locations, template_columns, by=B)
left_join(sample_locations, template_columns, by="B")
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {Var1 = LETTERS[1:8]}
else {Var1 = LETTERS[1:16]},
if (plate == 96) {Var2 = sprintf("%02d", 1:12)}
else {Var2 = sprintf("%02d", 1:24)}
)
View(template_columns)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {Var1 = LETTERS[1:8]}
else {Var1 = LETTERS[1:16]},
if (plate == 96) {Var2 = sprintf("%02d", 1:12)}
else {Var2 = sprintf("%02d", 1:24)}
)
template_columns <- c("B" = sort(paste0(template_columns$Var1, template_columns$Var2)))
view(template_columns)
names(template_columns) <- "B"
view(template_columns)
colnames(template_columns) <- c("B")
rm(Var1, Var2)
# Create a template of all possible columns
template_columns <- expand.grid(
if (plate == 96) {Var1 = LETTERS[1:8]}
else {Var1 = LETTERS[1:16]},
if (plate == 96) {Var2 = sprintf("%02d", 1:12)}
else {Var2 = sprintf("%02d", 1:24)}
)
template_columns <- sort(paste0(template_columns$Var1, template_columns$Var2))
# colnames(template_columns) <- c("B")
rm(Var1, Var2)
View(sample_locations)
full <- left_join(sample_locations, template_columns, by="B")
full <- left_join(sample_locations,
as.data.frame(template_columns),
by="B")
full <- left_join(sample_locations,
as.data.frame(template_columns),
by=B)
full <- left_join(sample_locations,
as.data.frame(template_columns),
by=x)
# Combine the template_columns and sample_locations.
template_columns <- as.data.frame(template_columns)
colnames(template_columns) <- "B"
View(template_columns)
full <- left_join(sample_locations,
as.data.frame(template_columns),
by=B)
full <- left_join(sample_locations,
as.data.frame(template_columns),
by="B")
View(full)
?left_join
full <- left_join(sample_locations,
as.data.frame(template_columns),
keep=T)
View(full)
colnames(template_columns) <- "A"
full <- left_join(sample_locations,
as.data.frame(template_columns),
keep=T)
full <- full_join(sample_locations,
as.data.frame(template_columns))
ID_labeller <- function(variable, value) {
return (full$B[full$A == value][[1]])
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
full$B[full$A == value]
ID_labeller <- function(variable, value) {
return (full$B[full$A == value])
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
full <- full_join(sample_locations,
as.data.frame(template_columns)) %>%
arrange(A)
View(full)
ID_labeller <- function(variable, value) {
return (full$B[full$A == value])
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
ID_labeller <- function(variable, value) {
i <- full$B[full$A == value]
ifelse(is.na(i), " ", i)
}
# Create a facet plot.
df %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
labs(y = "RFU",
x = "Time (h)") +
theme_classic2() +
theme(panel.border     = element_rect(colour = "black",
fill = NA,
size = 0.5),
strip.background = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank()) +
facet_wrap(vars(Well),
nrow=ifelse(plate == 96, 8, 16),
ncol=ifelse(plate == 96, 12, 24),
labeller=ID_labeller)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
ggsave("plate_view.png", width = 3600, height = 2400, units = "px")
library(stringr)
library(readxl)
library(tidyverse)
library(writexl)
library(openxlsx)
library(reshape2)
library(ggpubr)
?rename
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("C:/Users/rowde002/Box/MNPRO/RT-QuIC/RT-QuIC Data/Gage's RT-QuIC Runs/2024/20240722_r6_GR_scrapie_Nano")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("C:/Users/rowde002/Box/MNPRO/RT-QuIC/RT-QuIC Data/Gage's RT-QuIC Runs/2024/20240722_r3_GR_scrapie_Nano")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("C:/Users/rowde002/Box/MNPRO/RT-QuIC/RT-QuIC Data/Gage's RT-QuIC Runs/2024/20240722_r2_GR_scrapie_RT")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
setwd("C:/Users/rowde002/Box/MNPRO/RT-QuIC/RT-QuIC Data/Gage's RT-QuIC Runs/2024/20240722_r1_GR_scrapie_RT")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
install.packages(devtools)
install.packages("devtools")
install.packages("rtools")
R.version()
R.version
?require
install.packages("rtools")
install.packages("rtools")
install.packages("rtools")
?install.packages
install.packages("roxygen2")
library(quicR)
library(devtools)
install_github("gage1145/quicR")
usethis::use_version()
usethis::use_news_md()
