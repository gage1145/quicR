)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
df_deriv <- cbind(df_deriv, slope_column)
}
# Reformat df_deriv to match data formatting.
df_deriv_1 <- df_deriv %>%
as.data.frame() %>%
t() %>%
as.data.frame() %>%
slice(-1) %>%
select(-all_of(1:window)) %>%
mutate_all(as.numeric)
View(df_deriv_1)
MS_list <- apply(df_deriv_1, 1, function(x) max(as.numeric(x)))
df_deriv <- df_norm_t$Time
df_deriv <- data.frame(Time = df_norm_t$Time)
View(df_deriv)
for (i in colnames(df_norm_t)[-"Time"]) {
slope_column <- slide(
df_norm_t,
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
df_deriv <- cbind(df_deriv, slope_column)
}
for (i in colnames(df_norm_t)[-c("Time")]) {
slope_column <- slide(
df_norm_t,
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
df_deriv <- cbind(df_deriv, slope_column)
}
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
slope_column <- slide(
df_norm_t,
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
df_deriv <- cbind(df_deriv, slope_column)
}
ncol(df_norm_t)
slope_column <- slide(
df_norm_t,
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
View(slope_column)
df_deriv <- data.frame(Time = df_norm_t$Time)
df_deriv <- cbind(df_deriv, slope_column)
View(df_deriv)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
c()
df_deriv <- cbind(df_deriv, slope_column)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
t()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.data.frame()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.data.frame()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
)
View(slope_column)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
c()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.numeric(as.character())
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv <- cbind(df_deriv, slope_column)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character() %>% as.numeric
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character() %>% as.numeric()
df_deriv <- data.frame(Time = df_norm_t$Time)
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv <- cbind(df_deriv, slope_column)
}
View(df_deriv)
# Reformat df_deriv to match data formatting.
df_deriv_1 <- df_deriv %>%
# as.data.frame() %>%
t() %>%
as.data.frame() %>%
slice(-1) %>%
select(-all_of(1:window)) %>%
mutate_all(as.numeric)
View(df_deriv_1)
lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)
lm(V1 ~ Time, data = df_norm_t)
lm(V1 ~ Time, data = df_norm_t) %>% View()
df_deriv_x <- data.frame(Time = df_norm_t$Time)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
View(slope_column)
slope_column
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv_x <- cbind(df_deriv, slope_column)
View(df_deriv_x)
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv_x <- cbind(df_deriv, slope_column)
}
df_deriv_x <- data.frame(Time = df_norm_t$Time)
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1]$coefficients / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv_x <- cbind(df_deriv, slope_column)
}
View(df_deriv_x)
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1][2] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[1][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv <- data.frame(Time = df_norm_t$Time)
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
slope_column <- df_norm_t %>%
slide(
~lm(
as.formula(
paste0(i, " ~ Time")
),
data = .x
)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv <- cbind(df_deriv, slope_column)
}
# Reformat df_deriv to match data formatting.
df_deriv_1 <- df_deriv %>%
# as.data.frame() %>%
t() %>%
as.data.frame()
View(df_deriv_1)
# Reformat df_deriv to match data formatting.
df_deriv_1 <- df_deriv %>%
# as.data.frame() %>%
t() %>%
as.data.frame() %>%
slice(-1)
View(df_deriv_1)
# Reformat df_deriv to match data formatting.
df_deriv_1 <- df_deriv %>%
# as.data.frame() %>%
t() %>%
as.data.frame() %>%
slice(-1) %>%
select(-all_of(1:window)) %>%
mutate_all(as.numeric)
MS_list <- apply(df_deriv_1, 1, function(x) max(as.numeric(x)))
View(df_deriv)
df_norm_t <- data %>%
t() %>%
as.data.frame() %>%
mutate_all(
~ as.numeric(as.character(.x))
) %>%
suppressWarnings() %>%
na.omit()
df_norm_t$Time <- rownames(df_norm_t)
df_deriv <- data.frame(Time = df_norm_t$Time)
for (i in colnames(df_norm_t)[-ncol(df_norm_t)]) {
formula <- as.formula(paste0(i, " ~ Time"))
slope_column <- df_norm_t %>%
slide(
~lm(formula, data = .x)[[1]][[2]] / 3600,
.before = window,
.complete = TRUE
) %>%
as.character()
df_deriv <- cbind(df_deriv, slope_column)
}
df_deriv <- df_deriv %>%
t() %>%
as.data.frame() %>%
slice(-1) %>%
select(-all_of(1:window)) %>%
mutate_all(as.numeric)
View(df_deriv)
MS_list <- apply(df_deriv, 1, function(x) max(as.numeric(x)))
install_github("jhollist/manuscriptPackage",build_vignettes=TRUE)
devtools::install_github("jhollist/manuscriptPackage",build_vignettes=TRUE)
devtools::install_github("jhollist/manuscriptPackage",build_vignettes=TRUE)
library(devtools)
install_github("jhollist/manuscriptPackage",build_vignettes=TRUE)
install_github("jhollist/manuscriptPackage")
library(manuscriptPackage)
vignette("manuscript", "quicR")
file <- "inst/extdata/input_files/test.xlsx"
plate = 96
# Define the layout using the first sheet in the excel file.
# The sheet should be formatted so that each ID in the "layout" table is unique.
df_dic <- quicR::organize_tables(file, plate = plate)
IDs <- quicR::convert_tables(df_dic)[["Sample IDs"]] |>
na.omit()
# Determine if there is a dilutions table.
dilution_bool <- "Dilutions" %in% names(df_dic)
# Add dilution factors if applicable.
if (dilution_bool) {
dilutions <- quicR::convert_tables(df_dic)$Dilutions |>
as.numeric() |>
log10() * -1
}
# Read in the real-time data.
# get_real will return a list of dataframes depending on how many real-time
# measurements the user exported from MARS.
df_list <- quicR::get_real(file, ordered = FALSE)
df_id <- ifelse(
length(df_list) > 1,
as.integer(
readline(
paste(
"There are",
length(df_list),
"real-time data sets. Please enter a number in that range: "
)
)
),
1
)
df <- as.data.frame(df_list[[df_id]])
# Set the time column as the df index.
rownames(df) <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Get the wells used in the run.
wells <- quicR::get_wells(file)
View(wells)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- cbind(wells, IDs) |>
na.omit()
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations |>
dplyr::mutate(Dilutions = dilutions |> na.omit()) |>
dplyr::mutate(IDs = as.character(IDs)) |>
tidyr::unite(IDs, IDs:Dilutions, sep = "\n")
}
sample_locations <- sample_locations |>
mutate(IDs = ifelse(stringr::str_length(IDs) > 12, gsub(" ", "\n", IDs), IDs))
require(readxl)
require(tidyverse)
sample_locations <- sample_locations |>
mutate(IDs = ifelse(stringr::str_length(IDs) > 12, gsub(" ", "\n", IDs), IDs))
View(sample_locations)
quicR::plate_view(df, sample_locations, plate)
