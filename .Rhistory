booktabs = TRUE,
align = rep("c", 12),
# caption = "Dilutions",
linesep = ""
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE)
library(quicR)
library(dplyr)
library(kableExtra)
library(readxl)
library(readr)
library(ggplot2)
library(reshape2)
file <- "../../inst/extdata/input_files/test2.xlsx"
file_384 <- "../../inst/extdata/input_files/test384.xlsx"
sample_file <- "../../inst/extdata/BMG_formatting/plate_layout.csv"
path <- "../../inst/extdata/BMG_formatting"
tabs <- organize_tables(file)[-2]
rename <- function(x) {
names(x) <- 1:12
rownames(x) <- LETTERS[1:8]
return(x)
}
tabs$`Sample IDs` %>%
as.data.frame() %>%
rename() %>%
kable(align = rep("c", 12))
tabs$Dilutions %>%
as.data.frame() %>%
rename() %>%
kable(align = rep("c", 12))
tabs <- convert_tables(tabs)
tabs %>% head(12) %>% kable(row.names = FALSE)
get_sample_locations(
file, dilution_bool = TRUE, dilution_fun = function(x) -log10(x), sep = " "
) %>%
head(12) %>%
kable(row.names = FALSE, align = c("c", "c"))
get_meta(file) %>%
mutate_at("Meta_info", ~gsub("\\\\", "/", .)) %>%
kable(row.names = FALSE)
columns <- 8
df_ <- get_real(file, ordered = FALSE)[[1]] %>% as.data.frame()
df_[1:11, 1:columns] %>% kable(row.names = FALSE, align = rep("c", columns))
columns <- 12
transpose_real(df_)[1:7, 1:columns] %>%
kable(row.names = FALSE, align = rep("c", columns))
df_norm <- normalize_RFU(df_, bg_cycle = 4, transposed = FALSE)
df_norm[1:7, 1:columns] %>%
mutate_at(2:ncol(.), ~round(as.numeric(.), 2)) %>%
kable(row.names = FALSE, align = rep("c", columns))
df_norm <- df_norm %>%
mutate(`Sample IDs` = tabs$`Sample IDs`)
samples <- tabs$`Sample IDs`
dilutions <- tabs$Dilutions %>% na.omit() %>% as.numeric()
df_analyzed <- data.frame("Sample IDs" = samples, check.names = FALSE) %>%
mutate(
Dilutions = -log10(dilutions),
# Maxpoint Ratio
MPR = calculate_MPR(df_norm, start_col = 3, data_is_norm = TRUE),
# Max Slope
MS = calculate_MS(df_norm, data_is_norm = TRUE),
# Time to Threshold
TtT = calculate_TtT(df_norm, threshold = 2, start_col = 3),
# Rate of Amyloid Formation
RAF = 1 / TtT
)
df_analyzed%>%
head(12) %>%
kable(row.names = FALSE, align = rep("c", ncol(df_analyzed)))
#| fig-width: 12
#| fig-height: 8
sample_locations <- get_sample_locations(
file,
dilution_bool = TRUE,
dilution_fun = function(x) -log10(x)
)
plate_view(df_, sample_locations)
#| fig-width: 8
#| fig-height: 6.5
df_analyzed %>%
melt(id.vars = c("Sample IDs", "Dilutions")) %>%
mutate_at("Dilutions", as.factor) %>%
ggplot(aes(`Sample IDs`, value, fill = Dilutions)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free") +
theme(
legend.position = "bottom",
strip.text = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank()
)
?column_spec
rename <- function(x) {
names(x) <- 1:12
rownames(x) <- LETTERS[1:8]
return(x)
}
tabs$`Sample IDs` %>%
as.data.frame() %>%
rename() %>%
kable(align = rep("c", 12)) %>%
column_spec(1, border_right = T)
?kable
?kable_styling
#| include: FALSE
tabs <- organize_tables(file)[-2]
?kable_styling
library(tidyverse)
library(quicR)
file <- "~/Work/quicR/inst/extdata/input_files/test2.xlsx"
data <- get_real(file)
data <- data[1]
data <- data[[1]]
View(data)
avg <- mean(data[-1])
avg <- mean(data)
data <- as.numeric(data)
data <- as.data.frame(data)
avg <- mean(data)
View(data)
data <- [-"Time"]
data <- data[-"Time"]
data <- data[-c("Time")]
data <- data %>%
select(-"Time")
View(data)
data <- get_real(file)
data1 <- data %>%
select(-"Time") %>%
mutate_all(as.numeric)
data <- data[[1]]
data1 <- data %>%
select(-"Time") %>%
mutate_all(as.numeric)
View(data1)
View(data)
avg <- mean(data1[2, ])
data1[2,]
avg <- sapply(data1[background_cycle, ], mean)
background_cycle = 2
avg <- sapply(data1[background_cycle, ], mean)
avg <- mean(data[[1, ]])
data1 <- data %>%
as.data.frame() %>%
select(-"Time") %>%
mutate_all(as.numeric)
avg <- mean(data1[[1, ]])
avg <- rowMeans(data1[[1, ]])
avg <- rowMeans(data1[1, ])
avg
avg <- rowMeans(data1[background_cycle, ])
avg <- rowMeans(data1[background_cycle, ])[1]
avg <- rowMeans(data1[background_cycle, ])[[1]]
data1 <- data %>%
select(-"Time") %>%
mutate_all(as.numeric)
avg <- rowMeans(data1[background_cycle, ])[[1]]
data1 <- data %>%
select(-"Time") %>%
mutate_all(as.numeric)
avg <- rowMeans(data1[background_cycle, ])[[1]]
data1 <- data %>%
select(-"Time")
# mutate_all(as.numeric)
avg <- rowMeans(data1[background_cycle, ])[[1]]
std <- apply(data1[background_cycle, ], 1, sd, na.rm = TRUE)
avg <- apply(data1[background_cycle, ], 1, mean, na.rm = TRUE)
data1 <- data %>%
select(-"Time") %>%
mutate_all(as.numeric)
avg <- apply(data1[background_cycle, ], 1, mean, na.rm = TRUE)
std <- apply(data1[background_cycle, ], 1, sd, na.rm = TRUE)
multiplier = 10
method = c("sd")
is.array(method)
is.vector(method)
method[1]
method[[1]]
method = c("sd", "none")
is.vector(method)
is.array(method)
is.vector(file)
method = list("sd", "none")
is.array(method)
is.list(method)
method[1]
method[2]
method[[1]]
if (is.list(method)) method <- method[[1]]
if (method == "sd") {
avg <- apply(data1[background_cycle, ], 1, mean, na.rm = TRUE)
std <- apply(data1[background_cycle, ], 1, sd, na.rm = TRUE) * multiplier
threshold <- avg + std
}
avg <- function() apply(data1[background_cycle, ], 1, mean, na.rm = TRUE)
std <- function() apply(data1[background_cycle, ], 1, sd, na.rm = TRUE) * multiplier
print(avg() + std())
method = list("sd", "none")
if (is.list(method)) method <- method[["sd"]]
method = list("sd", "none")
if (is.list(method)) method <- method[["sd"]]
method = list("sd", "none")
if (is.list(method)) method <- method[which(method == "sd")]
method = list("sd", "none")
if (is.list(method)) method <- method[[which(method == "sd")]]
data |>
select(-"Time") |>
lapply(as.numeric)
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' df_ <- get_real(file)[[1]] |>
#'   quicR::transpose_real() |>
#'   quicR::normalize_RFU(transposed = TRUE)
#' calculate_TtT(df_, threshold = 2)
#' }
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("sd", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "sd")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric)
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
calculate_threshold(data)
method = list("sd", "none")
if (is.list(method)) method <- method[[which(method == "sd")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric)
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
print(avg() + std())
# return(avg() + std())
}
curate()
View(curate())
curate <- function() {
data |>
as.data.frame()
select(-"Time") |>
lapply(as.numeric)
}
curate <- function() {
data |>
as.data.frame()
select(-"Time") |>
lapply(as.numeric)
}
View(curate())
curate <- function() {
data |>
as.data.frame()
select(-"Time") |>
lapply(as.numeric)
}
curate()
curate <- function() {
data |>
as.data.frame() |>
select(-"Time") |>
lapply(as.numeric)
}
curate()
View(curate)
View(curate())
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
curate()
View(curate())
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' df_ <- get_real(file)[[1]] |>
#'   quicR::transpose_real() |>
#'   quicR::normalize_RFU(transposed = TRUE)
#' calculate_TtT(df_, threshold = 2)
#' }
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("sd", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "sd")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
print(avg() + std())
# return(avg() + std())
}
}
calculate_threshold(data = data)
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' df_ <- get_real(file)[[1]] |>
#'   quicR::transpose_real() |>
#'   quicR::normalize_RFU(transposed = TRUE)
#' calculate_TtT(df_, threshold = 2)
#' }
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("sd", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "sd")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
calculate_threshold(data)
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
get_row()
View(get_row())
data
View(data)
avg()
background_cycle = 1
avg
avg()
avg() + std()
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' df_ <- get_real(file)[[1]] |>
#'   quicR::transpose_real() |>
#'   quicR::normalize_RFU(transposed = TRUE)
#' calculate_TtT(df_, threshold = 2)
#' }
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("sd", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "sd")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
calculate_threshold(data, multiplier = 10)
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' df_ <- get_real(file)[[1]] |>
#'   calculate_threshold()
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("stdev", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "stdev")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
get_real(file)[[1]] |> calculate_threshold()
get_real(file)[[1]]
t <- get_real(file)[[1]] |> calculate_threshold()
t <- get_real(file)[[1]]
t <- get_real(file)[[1]] |> calculate_threshold(multiplier = 10)
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' threshold <- get_real(file)[[1]] |>
#'   calculate_threshold()
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("stdev", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "stdev")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "sd") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
calculate_threshold(data, multiplier = 10)
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' threshold <- get_real(file)[[1]] |>
#'   calculate_threshold()
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("stdev", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "stdev")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "stdev") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
return(avg() + std())
}
}
calculate_threshold(data, multiplier = 10)
t <- get_real(file)[[1]] |> calculate_threshold(multiplier = 10)
calculate_threshold(data)
avg()
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)
std <- function() apply(get_row(), 1, sd, na.rm = TRUE) * multiplier
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)[1]
avg()
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)[[1]]
avg()
std <- function() apply(get_row(), 1, sd, na.rm = TRUE)[[1]] * multiplier
std()
#' @examples
#' file <- system.file(
#'   "extdata/input_files",
#'   file = "test2.xlsx",
#'   package = "quicR"
#' )
#' threshold <- get_real(file)[[1]] |>
#'   calculate_threshold()
#'
#' @export
calculate_threshold <- function(data, background_cycle = 2, method = list("stdev", "none"), multiplier = 1) {
if (is.list(method)) method <- method[[which(method == "stdev")]]
if (method == "none") return()
curate <- function() {
data |>
select(-"Time") |>
lapply(as.numeric) |>
as.data.frame()
}
if (method == "stdev") {
get_row <- function() curate()[background_cycle, ]
avg <- function() apply(get_row(), 1, mean, na.rm = TRUE)[[1]]
std <- function() apply(get_row(), 1, sd, na.rm = TRUE)[[1]] * multiplier
return(avg() + std())
}
}
calculate_threshold(data)
t <- get_real(file)[[1]] |> calculate_threshold()
t <- get_real(file)[[1]] |> calculate_threshold(multiplier = 10)
?select
?calculate_threshold
